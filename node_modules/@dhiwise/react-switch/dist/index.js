function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(require('prop-types'));

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var uncheckedIcon = /*#__PURE__*/React__default.createElement("svg", {
  viewBox: "-2 -5 14 20",
  height: "100%",
  width: "100%",
  style: {
    position: "absolute",
    top: 0
  }
}, /*#__PURE__*/React__default.createElement("path", {
  d: "M9.9 2.12L7.78 0 4.95 2.828 2.12 0 0 2.12l2.83 2.83L0 7.776 2.123 9.9 4.95 7.07 7.78 9.9 9.9 7.776 7.072 4.95 9.9 2.12",
  fill: "#fff",
  fillRule: "evenodd"
}));
var checkedIcon = /*#__PURE__*/React__default.createElement("svg", {
  height: "100%",
  width: "100%",
  viewBox: "-2 -5 17 21",
  style: {
    position: "absolute",
    top: 0
  }
}, /*#__PURE__*/React__default.createElement("path", {
  d: "M11.264 0L5.26 6.004 2.103 2.847 0 4.95l5.26 5.26 8.108-8.107L11.264 0",
  fill: "#fff",
  fillRule: "evenodd"
}));

function createBackgroundColor(pos, checkedPos, uncheckedPos, offColor, onColor) {
  var relativePos = (pos - uncheckedPos) / (checkedPos - uncheckedPos);

  if (relativePos === 0) {
    return offColor;
  }

  if (relativePos === 1) {
    return onColor;
  }

  var newColor = '#';

  for (var i = 1; i < 6; i += 2) {
    var offComponent = parseInt(offColor.substr(i, 2), 16);
    var onComponent = parseInt(onColor.substr(i, 2), 16);
    var weightedValue = Math.round((1 - relativePos) * offComponent + relativePos * onComponent);
    var newComponent = weightedValue.toString(16);

    if (newComponent.length === 1) {
      newComponent = "0" + newComponent;
    }

    newColor += newComponent;
  }

  return newColor;
}

function convertShorthandColor(color) {
  if (color.length >= 7) {
    return color;
  }

  var sixDigitColor = '#';

  for (var i = 1; i < 4; i += 1) {
    sixDigitColor += color[i] + color[i];
  }

  return sixDigitColor;
}

function getBackgroundColor(pos, checkedPos, uncheckedPos, offColor, onColor) {
  var sixDigitOffColor = convertShorthandColor(offColor);
  var sixDigitOnColor = convertShorthandColor(onColor);
  return createBackgroundColor(pos, checkedPos, uncheckedPos, sixDigitOffColor, sixDigitOnColor);
}

var hexColorPropType = function hexColorPropType(props, propName, componentName) {
  var prop = props[propName];

  if (typeof prop !== "string" || prop[0] !== "#" || prop.length !== 4 && prop.length !== 7) {
    return new Error("Invalid prop '" + propName + "' supplied to '" + componentName + "'. '" + propName + "' has to be either a 3-digit or 6-digit hex-color string. Valid examples: '#abc', '#123456'");
  }

  return null;
};

// A type of promise-like that resolves synchronously and supports only one observer

const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== "undefined" ? (Symbol.iterator || (Symbol.iterator = Symbol("Symbol.iterator"))) : "@@iterator";

const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== "undefined" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol("Symbol.asyncIterator"))) : "@@asyncIterator";

// Asynchronously call a function and send errors to recovery continuation
function _catch(body, recover) {
	try {
		var result = body();
	} catch(e) {
		return recover(e);
	}
	if (result && result.then) {
		return result.then(void 0, recover);
	}
	return result;
}

var useAsyncExtendedState = function useAsyncExtendedState(initialState) {
  var _useState = React.useState(initialState),
      state = _useState[0],
      setState = _useState[1];

  var asyncSetState = React.useMemo(function () {
    return function (nextState) {
      var _exit = false;
      var initialNextState = nextState;
      return Promise.resolve(_catch(function () {
        function _temp2(_result) {
          if (_exit) return _result;
          setState(function (state) {
            if (typeof nextState === "function") {
              nextState = nextState(state);
            }

            return nextState;
          });
        }

        var _temp = function () {
          if (nextState instanceof Promise) {
            return Promise.resolve(nextState).then(function (_nextState) {
              nextState = _nextState;

              if (nextState === initialNextState) {
                throw new Error("Uncatchable error.");
              }
            });
          }
        }();

        return _temp && _temp.then ? _temp.then(_temp2) : _temp2(_temp);
      }, function () {}));
    };
  }, []);
  var asyncExtendState = React.useMemo(function () {
    return function (extendState) {
      var _exit2 = false;
      var initialExtendState = extendState;
      return Promise.resolve(_catch(function () {
        function _temp4(_result3) {
          if (_exit2) return _result3;
          setState(function (state) {
            if (typeof extendState === "function") {
              extendState = extendState(state);
            }

            return _extends({}, state, extendState);
          });
        }

        var _temp3 = function () {
          if (extendState instanceof Promise) {
            return Promise.resolve(extendState).then(function (_extendState) {
              extendState = _extendState;

              if (extendState === initialExtendState) {
                throw new Error("Uncatchable error.");
              }
            });
          }
        }();

        return _temp3 && _temp3.then ? _temp3.then(_temp4) : _temp4(_temp3);
      }, function () {}));
    };
  }, []);
  return [state, asyncSetState, asyncExtendState];
};

var _excluded = ["checked", "disabled", "className", "offColor", "onColor", "offHandleColor", "onHandleColor", "checkedIcon", "uncheckedIcon", "checkedHandleIcon", "uncheckedHandleIcon", "boxShadow", "activeBoxShadow", "height", "width", "borderRadius", "handleDiameter", "backgroundStyleProp", "handleStyleProp"];

var ReactSwitch = function ReactSwitch(_ref) {
  var checked = _ref.checked,
      disabled = _ref.disabled,
      className = _ref.className,
      offColor = _ref.offColor,
      onColor = _ref.onColor,
      offHandleColor = _ref.offHandleColor,
      onHandleColor = _ref.onHandleColor,
      checkedIcon = _ref.checkedIcon,
      uncheckedIcon = _ref.uncheckedIcon,
      checkedHandleIcon = _ref.checkedHandleIcon,
      uncheckedHandleIcon = _ref.uncheckedHandleIcon,
      boxShadow = _ref.boxShadow,
      activeBoxShadow = _ref.activeBoxShadow,
      height = _ref.height,
      width = _ref.width,
      borderRadius = _ref.borderRadius,
      handleDiameter = _ref.handleDiameter,
      backgroundStyleProp = _ref.backgroundStyleProp,
      handleStyleProp = _ref.handleStyleProp,
      rest = _objectWithoutPropertiesLoose(_ref, _excluded);

  var _useAsyncExtendedStat = useAsyncExtendedState({}),
      state = _useAsyncExtendedStat[0],
      setState = _useAsyncExtendedStat[2];

  var $isMounted = React__default.useRef(false);
  var $inputRef = React__default.useRef();
  var uiVals = React__default.useMemo(function () {
    var result = {};
    result.$handleDiameter = handleDiameter || height - 2;
    result.$checkedPos = Math.max(width - height, width - (height + result.$handleDiameter) / 2);
    result.$uncheckedPos = Math.max(0, (height - result.$handleDiameter) / 2);
    result.$lastDragAt = 0;
    result.$lastKeyUpAt = 0;
    setState({
      $pos: checked ? result.$checkedPos : result.$uncheckedPos
    });
    return result;
  }, [handleDiameter, height, width, checked]);
  React__default.useEffect(function () {
    $isMounted.current = true;
    return function () {
      $isMounted.current = false;
    };
  }, []);
  React__default.useEffect(function () {
    setState({
      $pos: checked ? uiVals.$checkedPos : uiVals.$uncheckedPos
    });
  }, [uiVals]);

  function $onDragStart(clientX) {
    $inputRef.current.focus();
    setState({
      $startX: clientX,
      $hasOutline: true,
      $dragStartingTime: Date.now()
    });
  }

  function $onDrag(clientX) {
    var $startX = state.$startX,
        $isDragging = state.$isDragging,
        $pos = state.$pos;
    var startPos = checked ? uiVals.$checkedPos : uiVals.$uncheckedPos;
    var mousePos = startPos + clientX - $startX;

    if (!$isDragging && clientX !== $startX) {
      setState({
        $isDragging: true
      });
    }

    var newPos = Math.min(uiVals.$checkedPos, Math.max(uiVals.$uncheckedPos, mousePos));

    if (newPos !== $pos) {
      setState({
        $pos: newPos
      });
    }
  }

  function $onDragStop(event) {
    var $pos = state.$pos,
        $isDragging = state.$isDragging,
        $dragStartingTime = state.$dragStartingTime;
    var halfwayCheckpoint = (uiVals.$checkedPos + uiVals.$uncheckedPos) / 2;
    var prevPos = checked ? uiVals.$checkedPos : uiVals.$uncheckedPos;
    setState({
      $pos: prevPos
    });
    var timeSinceStart = Date.now() - $dragStartingTime;
    var isSimulatedClick = !$isDragging || timeSinceStart < 250;
    var isDraggedHalfway = checked && $pos <= halfwayCheckpoint || !checked && $pos >= halfwayCheckpoint;

    if (isSimulatedClick || isDraggedHalfway) {
      $onChange(event);
    }

    if ($isMounted.current) {
      setState({
        $isDragging: false,
        $hasOutline: false
      });
    }

    uiVals.$lastDragAt = Date.now();
  }

  function $onMouseDown(event) {
    event.preventDefault();

    if (typeof event.button === 'number' && event.button !== 0) {
      return;
    }

    $onDragStart(event.clientX);
    window.addEventListener('mousemove', $onMouseMove);
    window.addEventListener('mouseup', $onMouseUp);
  }

  function $onMouseMove(event) {
    event.preventDefault();
    $onDrag(event.clientX);
  }

  function $onMouseUp(event) {
    $onDragStop(event);
    window.removeEventListener('mousemove', $onMouseMove);
    window.removeEventListener('mouseup', $onMouseUp);
  }

  function $onTouchStart(event) {
    uiVals.$checkedStateFromDragging = null;
    $onDragStart(event.touches[0].clientX);
  }

  function $onTouchMove(event) {
    $onDrag(event.touches[0].clientX);
  }

  function $onTouchEnd(event) {
    event.preventDefault();
    $onDragStop(event);
  }

  function $onInputChange(event) {
    if (Date.now() - uiVals.$lastDragAt > 50) {
      $onChange(event);

      if (Date.now() - uiVals.$lastKeyUpAt > 50) {
        if ($isMounted) {
          setState({
            $hasOutline: false
          });
        }
      }
    }
  }

  function $onKeyUp() {
    uiVals.$lastKeyUpAt = Date.now();
  }

  function $setHasOutline() {
    setState({
      $hasOutline: true
    });
  }

  function $unsetHasOutline() {
    setState({
      $hasOutline: false
    });
  }

  function $onClick(event) {
    event.preventDefault();
    $inputRef.current.focus();
    $onChange(event);

    if ($isMounted) {
      setState({
        $hasOutline: false
      });
    }
  }

  function $onChange(event) {
    var onChange = rest.onChange,
        id = rest.id;
    onChange(!checked, event, id);
  }

  var $pos = state.$pos,
      $isDragging = state.$isDragging,
      $hasOutline = state.$hasOutline;

  var backgroundStyle = _extends({
    height: height,
    width: width,
    margin: Math.max(0, (uiVals.$handleDiameter - height) / 2),
    position: 'relative',
    background: getBackgroundColor($pos, uiVals.$checkedPos, uiVals.$uncheckedPos, offColor, onColor),
    borderRadius: typeof borderRadius === 'number' ? borderRadius : height / 2,
    cursor: disabled ? 'default' : 'pointer',
    WebkitTransition: $isDragging ? null : 'background 0.25s',
    MozTransition: $isDragging ? null : 'background 0.25s',
    transition: $isDragging ? null : 'background 0.25s'
  }, backgroundStyleProp);

  var checkedIconStyle = {
    height: height,
    width: Math.min(height * 1.5, width - (uiVals.$handleDiameter + height) / 2 + 1),
    position: 'relative',
    opacity: ($pos - uiVals.$uncheckedPos) / (uiVals.$checkedPos - uiVals.$uncheckedPos),
    pointerEvents: 'none',
    WebkitTransition: $isDragging ? null : 'opacity 0.25s',
    MozTransition: $isDragging ? null : 'opacity 0.25s',
    transition: $isDragging ? null : 'opacity 0.25s'
  };
  var uncheckedIconStyle = {
    height: height,
    width: Math.min(height * 1.5, width - (uiVals.$handleDiameter + height) / 2 + 1),
    position: 'absolute',
    opacity: 1 - ($pos - uiVals.$uncheckedPos) / (uiVals.$checkedPos - uiVals.$uncheckedPos),
    right: 0,
    top: 0,
    pointerEvents: 'none',
    WebkitTransition: $isDragging ? null : 'opacity 0.25s',
    MozTransition: $isDragging ? null : 'opacity 0.25s',
    transition: $isDragging ? null : 'opacity 0.25s'
  };

  var handleStyle = _extends({
    height: uiVals.$handleDiameter,
    width: uiVals.$handleDiameter,
    background: getBackgroundColor($pos, uiVals.$checkedPos, uiVals.$uncheckedPos, offHandleColor, onHandleColor),
    display: 'inline-block',
    cursor: disabled ? 'default' : 'pointer',
    borderRadius: typeof borderRadius === 'number' ? borderRadius - 1 : '50%',
    position: 'absolute',
    transform: "translateX(" + $pos + "px)",
    top: Math.max(0, (height - uiVals.$handleDiameter) / 2),
    outline: 0,
    boxShadow: $hasOutline ? activeBoxShadow : boxShadow,
    border: 0,
    WebkitTransition: $isDragging ? null : 'background-color 0.25s, transform 0.25s, box-shadow 0.15s',
    MozTransition: $isDragging ? null : 'background-color 0.25s, transform 0.25s, box-shadow 0.15s',
    transition: $isDragging ? null : 'background-color 0.25s, transform 0.25s, box-shadow 0.15s'
  }, handleStyleProp);

  var uncheckedHandleIconStyle = {
    height: uiVals.$handleDiameter,
    width: uiVals.$handleDiameter,
    opacity: Math.max((1 - ($pos - uiVals.$uncheckedPos) / (uiVals.$checkedPos - uiVals.$uncheckedPos) - 0.5) * 2, 0),
    position: 'absolute',
    left: 0,
    top: 0,
    pointerEvents: 'none',
    WebkitTransition: $isDragging ? null : 'opacity 0.25s',
    MozTransition: $isDragging ? null : 'opacity 0.25s',
    transition: $isDragging ? null : 'opacity 0.25s'
  };
  var checkedHandleIconStyle = {
    height: uiVals.$handleDiameter,
    width: uiVals.$handleDiameter,
    opacity: Math.max((($pos - uiVals.$uncheckedPos) / (uiVals.$checkedPos - uiVals.$uncheckedPos) - 0.5) * 2, 0),
    position: 'absolute',
    left: 0,
    top: 0,
    pointerEvents: 'none',
    WebkitTransition: $isDragging ? null : 'opacity 0.25s',
    MozTransition: $isDragging ? null : 'opacity 0.25s',
    transition: $isDragging ? null : 'opacity 0.25s'
  };
  var inputStyle = {
    border: 0,
    clip: 'rect(0 0 0 0)',
    height: 1,
    margin: -1,
    overflow: 'hidden',
    padding: 0,
    position: 'absolute',
    width: 1
  };
  var rootStyle = {
    position: 'relative',
    display: 'inline-block',
    textAlign: 'left',
    opacity: disabled ? 0.5 : 1,
    direction: 'ltr',
    borderRadius: height / 2,
    WebkitTransition: 'opacity 0.25s',
    MozTransition: 'opacity 0.25s',
    transition: 'opacity 0.25s',
    touchAction: 'none',
    WebkitTapHighlightColor: 'rgba(0, 0, 0, 0)',
    WebkitUserSelect: 'none',
    MozUserSelect: 'none',
    msUserSelect: 'none',
    userSelect: 'none'
  };
  return /*#__PURE__*/React__default.createElement("div", {
    className: className,
    style: rootStyle
  }, /*#__PURE__*/React__default.createElement("div", {
    className: "react-switch-bg",
    style: backgroundStyle,
    onClick: disabled ? null : $onClick,
    onMouseDown: function onMouseDown(e) {
      return e.preventDefault();
    }
  }, checkedIcon && /*#__PURE__*/React__default.createElement("div", {
    style: checkedIconStyle
  }, checkedIcon), uncheckedIcon && /*#__PURE__*/React__default.createElement("div", {
    style: uncheckedIconStyle
  }, uncheckedIcon)), /*#__PURE__*/React__default.createElement("div", {
    className: "react-switch-handle",
    style: handleStyle,
    onClick: function onClick(e) {
      return e.preventDefault();
    },
    onMouseDown: disabled ? null : $onMouseDown,
    onTouchStart: disabled ? null : $onTouchStart,
    onTouchMove: disabled ? null : $onTouchMove,
    onTouchEnd: disabled ? null : $onTouchEnd,
    onTouchCancel: disabled ? null : $unsetHasOutline
  }, uncheckedHandleIcon && /*#__PURE__*/React__default.createElement("div", {
    style: uncheckedHandleIconStyle
  }, uncheckedHandleIcon), checkedHandleIcon && /*#__PURE__*/React__default.createElement("div", {
    style: checkedHandleIconStyle
  }, checkedHandleIcon)), /*#__PURE__*/React__default.createElement("input", _extends({
    type: "checkbox",
    role: "switch",
    "aria-checked": checked,
    checked: checked,
    disabled: disabled,
    style: inputStyle
  }, rest, {
    ref: $inputRef,
    onFocus: $setHasOutline,
    onBlur: $unsetHasOutline,
    onKeyUp: $onKeyUp,
    onChange: $onInputChange
  })));
};

ReactSwitch.propTypes = {
  checked: PropTypes.bool.isRequired,
  onChange: PropTypes.func.isRequired,
  disabled: PropTypes.bool,
  offColor: hexColorPropType,
  onColor: hexColorPropType,
  offHandleColor: hexColorPropType,
  onHandleColor: hexColorPropType,
  handleDiameter: PropTypes.number,
  uncheckedIcon: PropTypes.oneOfType([PropTypes.bool, PropTypes.element]),
  checkedIcon: PropTypes.oneOfType([PropTypes.bool, PropTypes.element]),
  boxShadow: PropTypes.string,
  borderRadius: PropTypes.number,
  activeBoxShadow: PropTypes.string,
  uncheckedHandleIcon: PropTypes.element,
  checkedHandleIcon: PropTypes.element,
  height: PropTypes.number,
  width: PropTypes.number,
  id: PropTypes.string,
  className: PropTypes.string
};
ReactSwitch.defaultProps = {
  disabled: false,
  offColor: '#888',
  onColor: '#080',
  offHandleColor: '#fff',
  onHandleColor: '#fff',
  uncheckedIcon: uncheckedIcon,
  checkedIcon: checkedIcon,
  boxShadow: null,
  activeBoxShadow: '0 0 2px 3px #3bf',
  height: 28,
  width: 56
};

module.exports = ReactSwitch;
//# sourceMappingURL=index.js.map
